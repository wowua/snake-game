{"version":3,"sources":["objects/index.js","core/state.js","objects/cell.js","objects/board.js","core/emitter.js","objects/snake.js","objects/apple.js","objects/scores.js","core/canvas.js","core/userInput.js","core/helpers.js","core/updater.js","core/game.js","index.js"],"names":["objects","SNAKE","BOARD","APPLE","SCORES","initialState","head","col","row","position","size","edgeCell","cell","spacing","scores","lives","State","originalState","state","type","data","hasOwnProperty","Error","types","DEFAULT","Cell","ctx","getState","x","y","countPosition","beginPath","lineWidth","fillStyle","rect","fill","fillRect","strokeStyle","strokeRect","renderSnakeType","renderAppleType","renderDefaultType","Board","render","Emitter","events","listener","push","forEach","emitter","Snake","on","LOSE","blinkTheHead","interval","snakeHead","snakeCell","emptyCell","isEmpty","counter","setInterval","clearInterval","Apple","applePosition","Scores","font","color","showPressText","showGameOverText","RESTART","GAME_OVER","fillText","boardSize","boardCell","positionX","renderScores","renderLives","renderRestartText","renderGameOverText","Canvas","container","context","getContext","board","snake","apple","clearRect","canvas","width","height","directions","UP","DOWN","LEFT","RIGHT","UserInput","direction","document","addEventListener","e","detectDirection","code","spaceHandler","removeEventListener","emit","up","down","left","right","key","setDirection","getRandomInt","min","max","Math","round","random","Updater","newHeadPosition","calcNextHeadCell","moveSnakeToTheNextPosition","checkCollision","boardEdge","snakeCells","isAppleInsideTheSnake","some","calcRandomPosition","setState","setNewApplePosition","increaseScores","SCORE","nextHeadCell","bodyCell","ndx","decreaseLives","checkTheGameIsOver","snakePosition","newPosition","appleWasEaten","pop","defaultFps","Game","fps","updater","userInput","window","requestAnimationFrame","refreshScreen","newState","update","renderFrame","renderScreen","resetState","getElementById","game","start"],"mappings":"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","file":"snake-game.a459e4d8.js","sourceRoot":"..","sourcesContent":["export const objects = {\n  SNAKE: \"SNAKE\",\n  BOARD: \"BOARD\",\n  APPLE: \"APPLE\",\n  SCORES: \"SCORES\",\n};\n","import { objects } from \"../objects\";\n\nexport const initialState = {\n  [objects.SNAKE]: {\n    head: {\n      col: 8,\n      row: 6,\n    },\n    position: [\n      { col: 8, row: 6 },\n      { col: 8, row: 7 },\n      { col: 8, row: 8 },\n    ],\n  },\n  [objects.BOARD]: {\n    size: 15,\n    edgeCell: 1,\n    cell: {\n      size: 36,\n      spacing: 6,\n    },\n  },\n  [objects.APPLE]: {\n    position: {\n      col: 3,\n      row: 3\n    }\n  },\n  [objects.SCORES] : {\n    scores: 0,\n    lives: 3\n  }\n};\n\nclass State {\n  constructor(initialState = {}) {\n    this.originalState = {...initialState};\n    this.state = initialState;\n  }\n\n  setState(type, data) {\n    this.state[type] = { ...this.state[type], ...data };\n  }\n\n  getState(type) {\n    if (type && this.state.hasOwnProperty(type) === false) {\n      throw new Error(\n        `you are trying to get property ${type} which is not set in the state`\n      );\n    }\n\n    return type ? this.state[type] : this;\n  }\n\n  resetState(type) {\n    if (type && this.state.hasOwnProperty(type) === false) {\n      throw new Error(\n        `you are trying to reset property ${type} which is not set in the state`\n      );\n    }\n\n    this.state[type] = this.originalState[type];\n  }\n}\n\nexport const state = new State(initialState);\n","import { state } from \"../core/state\";\nimport { objects } from \"./index\";\nexport const types = {\n  DEFAULT: \"DEFAULT\",\n  SNAKE: \"SNAKE\",\n  APPLE: \"APPLE\"\n};\n\nexport class Cell {\n  constructor(ctx, position = { col: 0, row: 0 }, type = types.DEFAULT) {\n    this.ctx = ctx;\n\n    this.size = state.getState(objects.BOARD).cell.size;\n    this.spacing = state.getState(objects.BOARD).cell.spacing\n\n    this.position = {\n      col: position.col,\n      row: position.row,\n    };\n\n    this.type = types[type];\n  }\n\n  countPosition() {\n    return {\n      x: (this.size + this.spacing) * this.position.col,\n      y: (this.size + this.spacing) * this.position.row,\n    };\n  }\n\n  renderSnakeType() {\n    const position = this.countPosition();\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 1;\n    this.ctx.fillStyle = \"#222f3e\";\n    this.ctx.rect(position.x, position.y, this.size, this.size);\n    this.ctx.fill();\n  }\n\n  renderDefaultType() {\n    const position = this.countPosition();\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 1;\n    this.ctx.fillStyle = \"#fff\";\n    this.ctx.fillRect(position.x, position.y, this.size, this.size);\n    this.ctx.strokeStyle = \"#222f3e\";\n    this.ctx.strokeRect(position.x, position.y, this.size, this.size);\n  }\n\n  renderAppleType() {\n    const position = this.countPosition();\n    this.ctx.beginPath();\n    this.ctx.fillStyle = \"#10ac84\";\n    this.ctx.rect(position.x, position.y, this.size, this.size);\n    this.ctx.fill();\n  }\n\n  render() {\n    switch (this.type) {\n      case types.SNAKE:\n        return this.renderSnakeType();\n      case types.APPLE:\n        return this.renderAppleType();\n      default:\n        return this.renderDefaultType();\n    }\n  }\n}\n","import { Cell } from \"./cell\";\nimport { objects } from \"./index\";\nexport class Board {\n  constructor(ctx) {\n    this.ctx = ctx;\n  }\n  render(state) {\n    const { size } = state.getState(objects.BOARD);\n    for (let row = 1; row <= size; row++) {\n      for (let col = 1; col <= size; col++) {\n        const cell = new Cell(this.ctx, { col, row });\n        cell.render()\n      }\n    }\n  }\n}\n","export class Emitter {\n  constructor() {\n    this.events = {};\n  }\n\n  on(type, listener) {\n    this.events[type] = this.events[type] || [];\n    this.events[type].push(listener);\n  }\n\n  emit(type) {\n    if (this.events[type]) {\n      this.events[type].forEach((listener) => {\n        listener();\n      });\n    }\n  }\n}\n\nexport const emitter = new Emitter();\n\nexport const events = {\n  \"SCORE\": \"SCORE\",\n  \"LOSE\" : \"LOSE\",\n  \"RESTART\": \"RESTART\",\n  \"GAME_OVER\" : \"GAME_OVER\"\n}","import { Cell, types } from \"./cell\";\nimport { objects } from \"./index\";\nimport { events, emitter } from \"../core/emitter\";\nimport { state } from \"../core/state\";\n\nexport class Snake {\n  constructor(ctx) {\n    this.ctx = ctx;\n\n    emitter.on(events.LOSE, () => {\n      this.blinkTheHead(ctx);\n    });\n  }\n\n  blinkTheHead(ctx) {\n    const { head: snakeHead } = state.getState(objects.SNAKE);\n    const snakeCell = new Cell(ctx, snakeHead, types.SNAKE);\n    const emptyCell = new Cell(ctx, snakeHead, types.DEFAULT);\n    let isEmpty = true;\n    let counter = 0;\n    let interval;\n\n    interval = setInterval(() => {\n      if (typeof interval !== \"undefined\" && counter === 3) {\n        clearInterval(interval);\n      }\n\n      if (isEmpty) {\n        emptyCell.render();\n      } else {\n        snakeCell.render();\n      }\n\n      isEmpty = !isEmpty;\n      counter++;\n    }, 100);\n  }\n\n  render(state) {\n    const { position: snakePosition } = state.getState(objects.SNAKE);\n\n    snakePosition.forEach((snakeCell) => {\n      const cell = new Cell(\n        this.ctx,\n        {\n          col: snakeCell.col,\n          row: snakeCell.row,\n        },\n        types.SNAKE\n      );\n      cell.render();\n    });\n  }\n}\n","import { Cell, types } from \"./cell\";\nimport { objects } from \"./index\";\nexport class Apple {\n  constructor(ctx) {\n    this.ctx = ctx;\n  }\n\n  render(state) {\n    const { position: applePosition } = state.getState(objects.APPLE);\n\n    const cell = new Cell(\n      this.ctx,\n      {\n        col: applePosition.col,\n        row: applePosition.row,\n      },\n      types.APPLE\n    );\n    cell.render();\n  }\n}\n","import { objects } from \"./index\";\nimport {emitter, events} from \"../core/emitter\";\nexport class Scores {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.ctx.font = \"40px Share Tech Mono\";\n    this.color = \"#222f3e\";\n\n    this.showPressText = false;\n    this.showGameOverText = false;\n\n    emitter.on(events.LOSE, () => {\n      this.showPressText = true\n    });\n\n    emitter.on(events.RESTART, () => {\n      this.showPressText = false\n    });\n\n    emitter.on(events.GAME_OVER, () => {\n      this.showPressText = false;\n      this.showGameOverText = true;\n    })\n  }\n\n  renderScores(state, x, y) {\n    const { scores } = state.getState(objects.SCORES);\n    this.ctx.fillText(\"SCORES: \" + scores, x, y);\n  }\n\n  renderLives(state, x, y) {\n    const { lives } = state.getState(objects.SCORES);\n    this.ctx.fillText(\"LIVES: \" + lives, x, y);\n  }\n\n  renderRestartText(x, y) {\n    this.ctx.fillText(\"PRESS SPACE TO CONTINUE\", x, y)\n  }\n\n  renderGameOverText(x, y) {\n    this.ctx.fillText(\"GAME OVER\", x, y)\n  }\n\n  render(state) {\n    const { size: boardSize, cell: boardCell } = state.getState(objects.BOARD);\n    const positionX = (boardSize + 3) * (boardCell.size + boardCell.spacing);\n\n    this.ctx.fillStyle = this.color;\n    this.renderScores(state, positionX, 100);\n    this.renderLives(state, positionX, 200);\n\n    if (this.showPressText) {\n      this.renderRestartText(positionX, 400);\n    }\n\n    if (this.showGameOverText) {\n      this.renderGameOverText(positionX, 400);\n    }\n  }\n}\n","import { Board } from \"../objects/board\";\nimport { Snake } from \"../objects/snake\";\nimport { Apple } from \"../objects/apple\";\nimport { Scores } from \"../objects/scores\";\nexport class Canvas {\n  constructor(container) {\n    this.context = container.getContext(\"2d\");\n    this.board = new Board(this.context);\n    this.snake = new Snake(this.context);\n    this.apple = new Apple(this.context);\n    this.scores = new Scores(this.context);\n  }\n\n  refreshScreen() {\n    this.context.clearRect(\n      0,\n      0,\n      this.context.canvas.width,\n      this.context.canvas.height\n    );\n  }\n}\n","import { emitter, events } from \"./emitter\";\n\nexport const directions = {\n  UP: \"UP\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\",\n  RIGHT: \"RIGHT\",\n};\n\nexport class UserInput {\n  constructor() {\n    this.direction = directions.UP;\n\n    document.addEventListener(\"keydown\", (e) => {\n      this.detectDirection(e.code);\n    });\n\n    emitter.on(events.LOSE, () => {\n      this.direction = directions.UP;\n      document.addEventListener(\"keypress\", this.spaceHandler);\n    });\n\n    emitter.on(events.GAME_OVER, () => {\n      document.removeEventListener(\"keypress\", this.spaceHandler);\n    });\n\n    emitter.on(events.RESTART, () => {\n      document.removeEventListener(\"keypress\", this.spaceHandler);\n    });\n\n  }\n\n  spaceHandler(e) {\n    if (e.code === \"Space\") {\n      emitter.emit(events.RESTART);\n    }\n  }\n\n  setDirection() {\n    return {\n      up: () => {\n        // snake can't move to the opposite direction\n        if (this.direction === directions.DOWN) {\n          return (this.direction = directions.DOWN);\n        }\n        this.direction = directions.UP;\n      },\n      down: () => {\n        if (this.direction === directions.UP) {\n          return (this.direction = directions.UP);\n        }\n        this.direction = directions.DOWN;\n      },\n      left: () => {\n        if (this.direction === directions.RIGHT) {\n          return (this.direction = directions.RIGHT);\n        }\n        this.direction = directions.LEFT;\n      },\n      right: () => {\n        if (this.direction === directions.LEFT) {\n          return (this.direction = directions.LEFT);\n        }\n        this.direction = directions.RIGHT;\n      },\n    };\n  }\n\n  detectDirection(key) {\n    const direction = this.setDirection();\n    switch (key) {\n      case \"ArrowUp\":\n        direction.up();\n        break;\n      case \"ArrowDown\":\n        direction.down();\n        break;\n      case \"ArrowLeft\":\n        direction.left();\n        break;\n      case \"ArrowRight\":\n        direction.right();\n        break;\n    }\n  }\n}\n","export const getRandomInt = (min, max) => {\n  return Math.round(Math.random() * (max - min) + min);\n}","import { objects } from \"../objects\";\nimport { directions } from \"./userInput\";\nimport { getRandomInt } from \"./helpers\";\nimport { emitter, events } from \"./emitter\";\n\nexport class Updater {\n  constructor(state) {\n    this.state = state;\n  }\n\n  update({ direction }) {\n    const newHeadPosition = this.calcNextHeadCell(direction);\n    this.moveSnakeToTheNextPosition(newHeadPosition);\n    this.checkCollision(direction);\n\n    return this.state;\n  }\n\n  calcRandomPosition() {\n    const { size: boardSize, edgeCell: boardEdge } = this.state.getState(\n      objects.BOARD\n    );\n    const { position: snakeCells } = this.state.getState(objects.SNAKE);\n\n    const applePosition = {\n      col: getRandomInt(boardEdge, boardSize),\n      row: getRandomInt(boardEdge, boardSize),\n    };\n\n    const isAppleInsideTheSnake = snakeCells.some((snakeCell) => {\n      return (\n        snakeCell.col === applePosition.col &&\n        snakeCell.row === applePosition.row\n      );\n    });\n\n    if (isAppleInsideTheSnake) {\n      return this.calcRandomPosition();\n    } else {\n      return applePosition;\n    }\n  }\n\n  setNewApplePosition() {\n    const position = this.calcRandomPosition();\n    this.state.setState(objects.APPLE, { position });\n  }\n\n  calcNextHeadCell(direction) {\n    const { head: snakeHead } = this.state.getState(objects.SNAKE);\n    const { size: boardSize, edgeCell: boardEdge } = this.state.getState(\n      objects.BOARD\n    );\n\n    return {\n      [directions.UP]: () => {\n        return snakeHead.row <= boardEdge\n          ? { col: snakeHead.col, row: boardSize }\n          : { col: snakeHead.col, row: snakeHead.row - 1 };\n      },\n      [directions.DOWN]: () => {\n        return snakeHead.row >= boardSize\n          ? { col: snakeHead.col, row: boardEdge }\n          : { col: snakeHead.col, row: snakeHead.row + 1 };\n      },\n      [directions.RIGHT]: () => {\n        return snakeHead.col >= boardSize\n          ? { row: snakeHead.row, col: boardEdge }\n          : { row: snakeHead.row, col: snakeHead.col + 1 };\n      },\n      [directions.LEFT]: () => {\n        return snakeHead.col <= boardEdge\n          ? { row: snakeHead.row, col: boardSize }\n          : { row: snakeHead.row, col: snakeHead.col - 1 };\n      },\n    }[direction]();\n  }\n\n  increaseScores() {\n    const { scores } = this.state.getState(objects.SCORES);\n    this.state.setState(objects.SCORES, { scores: scores + 1 });\n  }\n\n  appleWasEaten() {\n    const { position: applePosition } = this.state.getState(objects.APPLE);\n    const { head: snakeHead } = this.state.getState(objects.SNAKE);\n\n    if (\n      applePosition.col === snakeHead.col &&\n      applePosition.row === snakeHead.row\n    ) {\n      this.setNewApplePosition();\n      this.increaseScores();\n      emitter.emit(events.SCORE);\n      return true;\n    }\n\n    return false;\n  }\n\n  checkCollision(direction) {\n    const { position: snakeCells } = this.state.getState(objects.SNAKE);\n\n    const nextHeadCell = this.calcNextHeadCell(direction);\n\n    const hasHeadHitBody = snakeCells.some((bodyCell, ndx) => {\n      return ndx > 0\n        ? bodyCell.col === nextHeadCell.col && bodyCell.row === nextHeadCell.row\n        : false;\n    });\n\n    if (hasHeadHitBody) {\n      this.decreaseLives();\n      emitter.emit(events.LOSE);\n\n      if (this.checkTheGameIsOver()) {\n        emitter.emit(events.GAME_OVER);\n      }\n    }\n  }\n\n  checkTheGameIsOver() {\n    const { lives } = this.state.getState(objects.SCORES);\n    return lives === 0;\n  }\n\n  decreaseLives() {\n    const { lives } = this.state.getState(objects.SCORES);\n    this.state.setState(objects.SCORES, { lives: lives - 1 });\n  }\n\n  moveSnakeToTheNextPosition(snakeHead) {\n    const { position: snakePosition } = this.state.getState(objects.SNAKE);\n\n    const newPosition = [snakeHead, ...snakePosition];\n\n    this.state.setState(objects.SNAKE, {\n      head: snakeHead,\n    });\n\n    this.state.setState(objects.SNAKE, {\n      position: newPosition,\n    });\n\n    if (this.appleWasEaten() === false) {\n      newPosition.pop();\n    }\n  }\n}\n","import { Canvas } from \"./canvas\";\nimport { emitter, events } from \"./emitter\";\nimport { UserInput } from \"./userInput\";\nimport { state } from \"./state\";\nimport { Updater } from \"./updater\";\nimport { objects } from \"../objects\";\n\nconst defaultFps = 300;\n\nexport class Game {\n  constructor(container) {\n    this.canvas = new Canvas(container);\n    this.fps = defaultFps;\n    this.interval = null;\n    this.updater = new Updater(state);\n    this.userInput = new UserInput();\n  }\n\n  renderFrame(state) {\n    window.requestAnimationFrame(() => {\n      this.canvas.refreshScreen();\n      this.canvas.board.render(state);\n      this.canvas.snake.render(state);\n      this.canvas.apple.render(state);\n      this.canvas.scores.render(state);\n    });\n  }\n\n  renderScreen() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n\n    this.interval = setInterval(() => {\n      const newState = this.updater.update(this.userInput);\n      this.renderFrame(newState);\n    }, this.fps);\n  }\n\n  start() {\n    emitter.on(events.SCORE, () => {\n      if (this.fps > 50) {\n        this.fps -= 10;\n      }\n\n      this.renderScreen();\n    });\n\n    emitter.on(events.LOSE, () => {\n      clearInterval(this.interval);\n    });\n\n    emitter.on(events.RESTART, () => {\n      this.fps = defaultFps;\n      state.resetState(objects.SNAKE);\n      this.renderScreen();\n    });\n\n    this.renderScreen();\n  }\n}\n","import { Game } from \"./core/game\";\n\nconst container = document.getElementById(\"game-canvas\");\nconst game = new Game(container);\n\nwindow.addEventListener(\"load\", () => {\n  game.start();\n});\n"]}